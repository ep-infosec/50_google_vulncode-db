"""Restructuring vulnerability PK and depending FKs, adds vcdb_id and more.
Note: Will set all vulnerability states non-revertible to PUBLISHED on upgrade.

Revision ID: 13b73f6d1082
Revises: 611733367157
Create Date: 2020-05-10 10:20:17.068667

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.sql import table

# revision identifiers, used by Alembic.
revision = "13b73f6d1082"
down_revision = "611733367157"
branch_labels = None
depends_on = None


def upgrade():
    op.drop_constraint("fk_vuln", "vulnerability_git_commits", type_="foreignkey")
    op.drop_column("vulnerability_git_commits", "version")
    # Remove autoincrement from the PK as there can only be one auto key and it has to be the PK.
    op.alter_column(
        "vulnerability",
        "id",
        existing_type=sa.Integer(),
        autoincrement=False,
        nullable=False,
    )
    op.drop_constraint("pk", "vulnerability", type_="primary")
    op.create_primary_key("id", "vulnerability", ["id"])
    op.alter_column(
        "vulnerability",
        "id",
        existing_type=sa.Integer(),
        autoincrement=True,
        nullable=False,
    )
    ##############
    op.create_foreign_key(
        "vulnerability_git_commits_ibfk_1",
        "vulnerability_git_commits",
        "vulnerability",
        ["vulnerability_details_id"],
        ["id"],
    )
    op.alter_column(
        "vulnerability",
        "version",
        existing_type=mysql.INTEGER(display_width=11),
        nullable=True,
    )
    op.add_column(
        "vulnerability", sa.Column("prev_version", sa.Integer(), nullable=True)
    )
    op.add_column("vulnerability", sa.Column("vcdb_id", sa.Integer(), nullable=True))

    # Copy the whole ID column contents into the new vcdb_id column and set all existing entries to PUBLISHED.
    vuln_table_view = table(
        "vulnerability",
        sa.Column("id", sa.Integer),
        sa.Column("vcdb_id", sa.Integer()),
        sa.Column(
            "state",
            sa.Enum(
                "NEW",
                "READY",
                "IN_REVIEW",
                "REVIEWED",
                "PUBLISHED",
                "ARCHIVED",
                name="vulnerabilitystate",
            ),
            nullable=False,
        )
        # Ignore all other columns.
    )
    op.execute(
        vuln_table_view.update().values(
            {"vcdb_id": vuln_table_view.c.id, "state": "PUBLISHED"}
        )
    )
    # -----------------------------------------------------

    op.create_unique_constraint(
        "uk_vcdb_id_version", "vulnerability", ["vcdb_id", "version"]
    )
    op.drop_index("uk_ver_cve_id", table_name="vulnerability")
    op.create_foreign_key(
        "fk_vuln",
        "vulnerability_git_commits",
        "vulnerability",
        ["vulnerability_details_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade():
    op.drop_constraint("fk_vuln", "vulnerability_git_commits", type_="foreignkey")
    op.create_index(
        "uk_ver_cve_id", "vulnerability", ["version", "cve_id"], unique=True
    )
    op.drop_constraint("uk_vcdb_id_version", "vulnerability", type_="unique")
    op.drop_column("vulnerability", "vcdb_id")
    op.drop_column("vulnerability", "prev_version")
    op.alter_column(
        "vulnerability",
        "version",
        existing_type=mysql.INTEGER(display_width=11),
        nullable=False,
    )
    # Drop all foreign keys on vulnerability.id as we intend to update it.
    op.drop_constraint(
        "vulnerability_git_commits_ibfk_1",
        "vulnerability_git_commits",
        type_="foreignkey",
    )
    ##############
    # Update the vulnerability primary key.
    # Remove autoincrement from the PK as there can only be one auto key and it has to be the PK.
    op.alter_column(
        "vulnerability",
        "id",
        existing_type=sa.Integer(),
        autoincrement=False,
        nullable=False,
    )
    op.drop_constraint("id", "vulnerability", type_="primary")
    # Now we can define a new primary key.
    op.create_primary_key("pk", "vulnerability", ["id", "version"])
    # Re-enable auto incrementing for the id column, too.
    op.alter_column(
        "vulnerability",
        "id",
        existing_type=sa.Integer(),
        autoincrement=True,
        nullable=False,
    )
    # ----------------------------------------------------------------------------------------------------
    op.add_column(
        "vulnerability_git_commits", sa.Column("version", sa.Integer(), nullable=False)
    )
    op.create_foreign_key(
        "fk_vuln",
        "vulnerability_git_commits",
        "vulnerability",
        ["vulnerability_details_id", "version"],
        ["id", "version"],
    )
    # ### end Alembic commands ###
